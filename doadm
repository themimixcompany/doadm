#!/usr/bin/env bash

set -euo pipefail

readonly SELF="$(basename ${BASH_SOURCE[0]})"
readonly SELF_DIR="$(cd $(dirname ${BASH_SOURCE[0]}) > /dev/null 2>&1 && pwd)"
readonly OS="$(uname)"
readonly VERSION="1.4.3"

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=
OPT_VERSION=

readonly VAL_GLOBAL_CONFIG=/usr/local/etc/${SELF}rc
readonly VAL_USER_XDG_CONFIG=$HOME/.config/${SELF}/${SELF}rc
readonly VAL_USER_HOME_CONFIG=$HOME/.${SELF}rc
readonly VAL_OUTBOUND_RULES="protocol:tcp,ports:all,address:0.0.0.0/0,address:::/0 protocol:udp,ports:all,address:0.0.0.0/0,address:::/0"

readonly VAL_ICMP_RULE="protocol:icmp,address:0.0.0.0/0,address:::/0 "

OPT_CONFIG=
OPT_NAME=
OPT_NEW_NAME=
OPT_INIT=

OPT_DROPLET=
OPT_DATABASE=
OPT_FIREWALL=
OPT_DOMAIN=

OPT_SSH_KEYS=
OPT_CREATE=
OPT_EXPUNGE=
OPT_RENAME=
OPT_LIST=
OPT_LIST_SHORT=
OPT_DROPLET_IMAGE=ubuntu-20-04-x64 # doctl compute image list-distribution
OPT_DROPLET_REGION=nyc1            # doctl compute region list
OPT_DROPLET_SIZE=s-1vcpu-1gb       # doctl compute size list
OPT_DATABASE_ENGINE=pg
OPT_DATABASE_REGION=nyc1
OPT_DATABASE_SIZE=db-s-1vcpu-1gb
OPT_DATABASE_VERSION=11
OPT_ADD_DROPLETS=
OPT_EXPUNGE_DROPLETS=
OPT_FIREWALL_NAME=
OPT_ADD_SELF_ADDRESS=
OPT_ADDRESSES=
OPT_PORTS=
OPT_SUBDOMAIN=
OPT_RECORD_TYPE="A"
OPT_FORCE=
OPT_POWER=

function error {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "ERROR: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1mERROR: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "WARNING: ${@}" >&2
  else
    echo -e "\e[0;33mWARNING: \e[0;0m${@}" >&2
  fi
}

function debug {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo -n "** "
    echo "\${PWD}: ${PWD}"
    echo "\${@}: ${@}"
  fi
}

function parse_arguments {
  debug "${FUNCNAME[0]}" "$@"

  local opts=$(getopt -n "${SELF}" --options IcxrdbfDn:N:k:Lli:g:z:E:G:Z:V:a:X:SA:P:s:t:oO --longoptions help,debug,verbose,version,init,create,expunge,rename,droplet,database,firewall,domain,name:,new-name:,ssh-key:,list,list-short,droplet-image:,droplet-region:,droplet-size:,database-engine:,database-region:,database-size:,database-version:,add-droplets:,expunge-droplets:,add-self-address,addresses:,ports:,subdomain:,record-type:,force,power-on,power-off -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Aborting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (--help) OPT_HELP=true; shift ;;
      (--debug) OPT_DEBUG=true; shift ;;
      (--verbose) OPT_VERBOSE=true; shift ;;
      (--version) OPT_VERSION=true; shift ;;
      (-I|--init) OPT_INIT=true; shift ;;
      (-c|--create) OPT_CREATE=true; shift ;;
      (-x|--expunge) OPT_EXPUNGE=true; shift ;;
      (-r|--rename) OPT_RENAME=true; shift ;;
      (-d|--droplet) OPT_DROPLET=true; shift ;;
      (-b|--database) OPT_DATABASE=true; shift ;;
      (-f|--firewall) OPT_FIREWALL=true; shift ;;
      (-D|--domain) OPT_DOMAIN=true; shift ;;
      (-n|--name) OPT_NAME=$2; shift 2 ;;
      (-N|--new-name) OPT_NEW_NAME=$2; shift 2 ;;
      (-k|--ssh-key) OPT_SSH_KEYS=$2; shift 2 ;;
      (-L|--list) OPT_LIST=true; shift ;;
      (-l|--list-short) OPT_LIST_SHORT=true; shift ;;
      (-i|--droplet-image) OPT_DROPLET_IMAGE=$2; shift 2 ;;
      (-g|--droplet-region) OPT_DROPLET_REGION=$2; shift 2 ;;
      (-z|--droplet-size) OPT_DROPLET_SIZE=$2; shift 2 ;;
      (-E|--database-engine) OPT_DATABASE_ENGINE=$2; shift 2 ;;
      (-G|--database-region) OPT_DATABASE_REGION=$2; shift 2 ;;
      (-Z|--database-size) OPT_DATABASE_SIZE=$2; shift 2 ;;
      (-V|--database-version) OPT_DATABASE_VERSION=$2; shift 2 ;;
      (-a|--add-droplets) OPT_ADD_DROPLETS=$2; shift 2 ;;
      (-X|--expunge-droplets) OPT_EXPUNGE_DROPLETS=$2; shift 2 ;;
      (-S|--add-self-address) OPT_ADD_SELF_ADDRESS=true; shift ;;
      (-A|--addresses) OPT_ADDRESSES=$2; shift 2 ;;
      (-P|--ports) OPT_PORTS=$2; shift 2 ;;
      (-s|--subdomain) OPT_SUBDOMAIN=$2; shift 2 ;;
      (-t|--record-type) OPT_RECORD_TYPE=$2; shift 2 ;;
      (--power-on) OPT_POWER="on"; shift ;;
      (--power-off) OPT_POWER="off"; shift ;;
      (--force) OPT_FORCE=true; shift ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

function process_arguments {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  elif [[ -n "${OPT_VERSION}" ]]; then
    display_version
  elif [[ -n "${OPT_INIT}" ]]; then
    init
    exit 0
  elif [[ -n "${OPT_LIST}" ]]; then
    if [[ -n "${OPT_DROPLET}" ]]; then
      list_droplets
      exit 0
    elif [[ -n "${OPT_DATABASE}" ]]; then
      list_databases
      exit 0
    elif [[ -n "${OPT_FIREWALL}" ]]; then
      list_firewalls
      exit 0
    elif [[ -n "${OPT_DOMAIN}" ]]; then
      list_domains
      exit 0
    else
      display_usage
    fi
  elif [[ -n "${OPT_LIST_SHORT}" ]]; then
    if [[ -n "${OPT_DROPLET}" ]]; then
      list_droplets_short
      exit 0
    elif [[ -n "${OPT_DATABASE}" ]]; then
      list_databases_short
      exit 0
    elif [[ -n "${OPT_FIREWALL}" ]]; then
      list_firewalls_short
      exit 0
    elif [[ -n "${OPT_DOMAIN}" ]]; then
      list_domains_short
      exit 0
    else
      display_usage
    fi
  elif [[ -z "${OPT_NAME}" ]]; then
    echo "then 0"
    display_usage
  else
    return 0
  fi
}

function display_usage {
  debug "${FUNCNAME[0]}" "$@"

  cat << EOF
${SELF} v${VERSION} [OPTIONS]...

OPTIONS:
      --help              Show this help
      --debug             Enable debugging mode
      --verbose           Enable verbose output
      --version           Display program version info
  -I, --init              Run the initialization commands
  -c, --create            Create a droplet, database, or firewall
  -x, --expunge           Expunge a droplet, database, or firewall
  -r, --rename            Rename a droplet. Use with -n
  -d, --droplet           Knob to set droplet operations
  -b, --database          Knob to set database operations
  -f, --firewall          Knob to set database operations
  -D, --domain            Knob to set DOMAIN operations
  -n, --name              The name of the droplet, database, or firewall to manage
  -N, --new-name          The new name of the droplet
  -K, --ssh-key           Set the allowed SSH key for the droplet
  -L, --list              List all the droplets, databases, or firewalls
  -l, --list-short        List all the droplets, databases, or firewalls in short format
  -i, --droplet-image     Set the droplet image (default: ${OPT_DROPLET_IMAGE})
  -g, --droplet-region    Set the droplet region (default: ${OPT_DROPLET_REGION})
  -s, --droplet-size      Set the droplet size (default: ${OPT_DROPLET_SIZE})
  -E, --database-engine   Set the database engine (default: ${OPT_DATABASE_ENGINE})
  -G, --database-region   Set the database region (default: ${OPT_DATABASE_REGION})
  -S, --database-size     Set the database size (default: ${OPT_DATABASE_SIZE})
  -V, --database-version  Set the database version (default: ${OPT_DATABASE_VERSION})
  -a, --add-droplets      A comma-separated list of droplets names to add to the firewall
  -X, --expunge-droplets  A comma-separated list of droplets names to expunge to the firewall
  -S, --add-self-address  Add own public IP address to list of IP addresses to allow
  -A, --addresses         A comma-separated list of IP addresses to allow
  -P, --ports             A comma-separated list of allowed ports
  -s, --subdomain         The subdomain to manage
  -t, --record-type       The type of DNS record to manage
      --force             Do not prompt user for operation confirmations
  -o, --power-on          Turn a droplet on
  -O, --power-off         Turn a droplet off
EOF
  exit 0
}

function display_version {
  debug "${FUNCNAME[0]}" "$@"

  cat << EOF
${SELF} v${VERSION}
EOF
  exit 0
}

function read_config {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_CONFIG}" ]]; then
    source "${OPT_CONFIG}"
  else
    if [[ -e "${VAL_USER_HOME_CONFIG}" ]]; then
      source "${VAL_USER_HOME_CONFIG}"
      OPT_TOKEN=${TOKEN}
      return 0
    fi

    if [[ -e "${VAL_USER_XDG_CONFIG}" ]]; then
      source "${VAL_USER_XDG_CONFIG}"
      OPT_TOKEN=${TOKEN}
      return 0
    fi

    if [[ -e "${VAL_GLOBAL_CONFIG}" ]]; then
      source "${VAL_GLOBAL_CONFIG}"
      OPT_TOKEN=${TOKEN}
      return 0
    fi
  fi
}

function init {
  debug "${FUNCNAME[0]}" "$@"

  doctl auth init
}

function list_droplets {
  debug "${FUNCNAME[0]}" "$@"

  doctl compute droplet list
}

function list_droplets_short {
  debug "${FUNCNAME[0]}" "$@"

  list_droplets | sed 1d | awk '{print $1 " " $2 " " $3}' | column -t
}

function get_droplet_id {
  debug "${FUNCNAME[0]}" "$@"

  list_droplets | awk '{print $1 " " $2}' | egrep "[0-9]+\s+${1}$" | awk '{print $1}'
}

function get_droplet_ids {
  debug "${FUNCNAME[0]}" "$@"

  local OIFS=${IFS}

  IFS="," read -ra DROPLET_NAMES <<< "${1}"

  for droplet_name in ${DROPLET_NAMES[@]}; do
    echo -n "$(get_droplet_id $droplet_name),"
  done

  IFS=${OIFS}
}

function create_droplet {
  debug "${FUNCNAME[0]}" "$@"

  doctl compute droplet create \
        --enable-backups \
        --image "${OPT_DROPLET_IMAGE}" \
        --region "${OPT_DROPLET_REGION}" \
        --size "${OPT_DROPLET_SIZE}" \
        --ssh-keys "${OPT_SSH_KEYS}" \
        --wait \
        "${OPT_NAME}" | sed 1d | awk '{print $3}'
}

function expunge_droplet {
  debug "${FUNCNAME[0]}" "$@"

  for id in $(get_droplet_id ${OPT_NAME}); do
    echo "${id} ${OPT_NAME}"
    if [[ -n "${OPT_FORCE}" ]]; then
      doctl compute droplet delete --force "${id}" || true
    else
      doctl compute droplet delete "${id}" || true
    fi
  done
}

function rename_droplet {
  debug "${FUNCNAME[0]}" "$@"

  for id in $(get_droplet_id ${OPT_NAME}); do
    echo "${id} ${OPT_NAME}"
    doctl compute droplet-action rename "${id}" --droplet-name "${OPT_NEW_NAME}" || true
  done
}

function list_databases {
  debug "${FUNCNAME[0]}" "$@"

  doctl databases list
}

function list_databases_short {
  debug "${FUNCNAME[0]}" "$@"

  list_databases | sed 1d | awk '{print $1 " " $2}' | column -t
}

function get_database_id {
  debug "${FUNCNAME[0]}" "$@"

  list_databases | awk "/[0-9]+\s+${1}/" | awk '{print $1}'
}

function create_database {
  debug "${FUNCNAME[0]}" "$@"

  doctl databases create \
        --engine "${OPT_DATABASE_ENGINE}" \
        --region "${OPT_DATABASE_REGION}" \
        --size "${OPT_DATABASE_SIZE}" \
        --version "${OPT_DATABASE_VERSION}" \
        "${OPT_NAME}" | sed 1d | awk '{print $9}'
}

function expunge_database {
  debug "${FUNCNAME[0]}" "$@"

  local id="$(get_database_id ${OPT_NAME})"

  if [[ -n "${id}" ]]; then
    echo "${id} ${OPT_NAME}"
    if [[ -n "${OPT_FORCE}" ]]; then
      doctl databases delete --force "${id}" || true
    else
      doctl databases delete "${id}" || true
    fi
  fi
}

function list_firewalls {
  debug "${FUNCNAME[0]}" "$@"

  doctl compute firewall list
}

function list_firewalls_short {
  debug "${FUNCNAME[0]}" "$@"

  list_firewalls | sed 1d | awk '{print $1 " " $2}' | column -t
}

function get_firewall_id {
  debug "${FUNCNAME[0]}" "$@"

  list_firewalls_short | egrep " ${1}$" | awk '{print $1}'
}

function extra_addresses {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_ADD_SELF_ADDRESS}" ]]; then
    dig +short myip.opendns.com @resolver1.opendns.com
  fi
}

function compose_addresses {
  debug "${FUNCNAME[0]}" "$@"

  local _extra=$(extra_addresses)
  local extra=

  if [[ -n "${_extra}" ]]; then
    extra="address:$(extra_addresses),"
  fi

  local OIFS=${IFS}

  IFS="," read -ra ADDRESSES <<< "${OPT_ADDRESSES}"

  for a in ${ADDRESSES[@]}; do
    echo -n "${extra}address:${a},"
  done

  IFS=${OIFS}
}

function compose_inbound_rules {
  debug "${FUNCNAME[0]}" "$@"

  local OIFS=${IFS}
  IFS="," read -ra PORTS <<< "${OPT_PORTS}"

  for p in ${PORTS[@]}; do
    echo -n "protocol:tcp,ports:${p},$(compose_addresses | sed 's/,$//') "
  done

  IFS=${OIFS}
}

function create_firewall {
  debug "${FUNCNAME[0]}" "$@"

  local firewall_id="$(get_firewall_id ${OPT_NAME})"
  local droplet_ids=
  local inbound_rules=

  if [[ -n "${firewall_id}" ]]; then
    if [[ -n "${OPT_ADD_DROPLETS}" && -z "${OPT_EXPUNGE_DROPLETS}" ]]; then
      droplet_ids="$(get_droplet_ids ${OPT_ADD_DROPLETS} | sed 's/,$//')"
      inbound_rules="$(compose_inbound_rules | sed 's/\ $//')"
      doctl compute firewall update "${firewall_id}" \
            --name "${OPT_NAME}" \
            --droplet-ids "${droplet_ids}" \
            --inbound-rules "${inbound_rules}" \
            --outbound-rules "${VAL_OUTBOUND_RULES}"
    elif [[ -n "${OPT_EXPUNGE_DROPLETS}" && -z "${OPT_ADD_DROPLETS}" ]]; then
      droplet_ids="$(get_droplet_ids ${OPT_EXPUNGE_DROPLETS} | sed 's/,$//')"
      doctl compute firewall remove-droplets "${firewall_id}" \
            --droplet-ids "${droplet_ids}"
    elif [[ -z "${OPT_ADD_DROPLETS}" && -z "${OPT_EXPUNGE_DROPLETS}" ]]; then
      inbound_rules="$(compose_inbound_rules | sed 's/\ $//')"
      doctl compute firewall update "${firewall_id}" \
            --name "${OPT_NAME}" \
            --inbound-rules "${inbound_rules}" \
            --outbound-rules "${VAL_OUTBOUND_RULES}"
    else
      display_usage
    fi
  else
    droplet_ids="$(get_droplet_ids ${OPT_ADD_DROPLETS} | sed 's/,$//')"
    inbound_rules="$(compose_inbound_rules | sed 's/\ $//')"
    doctl compute firewall create \
          --name "${OPT_NAME}" \
          --droplet-ids "${droplet_ids}" \
          --inbound-rules "${inbound_rules}" \
          --outbound-rules "${VAL_OUTBOUND_RULES}"
  fi
}

function expunge_firewall {
  debug "${FUNCNAME[0]}" "$@"

  local id="$(get_firewall_id ${OPT_NAME})"

  if [[ -n "${id}" ]]; then
    echo "${id} ${OPT_NAME}"
    if [[ -n "${OPT_FORCE}" ]]; then
      doctl compute firewall delete --force "${id}" || true
    else
      doctl compute firewall delete "${id}" || true
    fi
  fi
}

function list_domains {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_NAME}" ]]; then
    doctl compute domain records list "${OPT_NAME}" \
      | awk "/[0-9]+\s+${OPT_RECORD_TYPE}/" \
      | column -t
  else
    display_usage
  fi
}

function list_domains_short {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_NAME}" ]]; then
    doctl compute domain records list "${OPT_NAME}" \
      | awk "/[0-9]+\s+${OPT_RECORD_TYPE}/" \
      | awk '{print $1 " " $2 " " $3 " " $4}' \
      | column -t
  else
    display_usage
  fi
}

function create_domain {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_NAME}" && -n "${OPT_RECORD_TYPE}" && -n "${OPT_SUBDOMAIN}" && -n "${OPT_ADDRESSES}" ]]; then
    doctl compute domain records create \
          "${OPT_NAME}" \
          --record-type "${OPT_RECORD_TYPE}" \
          --record-name "${OPT_SUBDOMAIN}" \
          --record-data "${OPT_ADDRESSES}"
  else
    display_usage
  fi
}

function get_domain_id {
  debug "${FUNCNAME[0]}" "$@"

  list_domains | awk "/[0-9]+\s+${1}\s+${2}\s+/" | awk '{print $1}'
}

function expunge_domain {
  debug "${FUNCNAME[0]}" "$@"

  local id="$(get_domain_id ${OPT_RECORD_TYPE} ${OPT_SUBDOMAIN})"

  if [[ -n "${OPT_NAME}" && -n "${OPT_RECORD_TYPE}" && -n "${OPT_SUBDOMAIN}" && -n "${id}" ]]; then
    echo "${id} ${OPT_RECORD_TYPE} ${OPT_SUBDOMAIN}.${OPT_NAME}"
    if [[ -n "${OPT_FORCE}" ]]; then
      doctl compute domain records delete --force "${OPT_NAME}" "${id}" || true
    else
      doctl compute domain records delete "${OPT_NAME}" "${id}" || true
    fi
  else
    display_usage
  fi
}

function droplet_mode {
  debug "${FUNCNAME[0]}" "$@"

  [[ -n "${OPT_NAME}" && -n "${OPT_DROPLET}" ]] && return 0
}

function database_mode {
  debug "${FUNCNAME[0]}" "$@"

  [[ -n "${OPT_NAME}" && -n "${OPT_DATABASE}" ]] && return 0
}

function firewall_mode {
  debug "${FUNCNAME[0]}" "$@"

  [[ -n "${OPT_NAME}" && -n "${OPT_FIREWALL}" ]] && return 0
}

function domain_mode {
  debug "${FUNCNAME[0]}" "$@"

  [[ -n "${OPT_NAME}" && -n "${OPT_DOMAIN}" ]] && return 0
}

function create_mode {
  debug "${FUNCNAME[0]}" "$@"

  [[ -n "${OPT_CREATE}" ]] && return 0
}

function expunge_mode {
  debug "${FUNCNAME[0]}" "$@"

  [[ -n "${OPT_EXPUNGE}" ]] && return 0
}

function rename_mode {
  debug "${FUNCNAME[0]}" "$@"

  [[ -n "${OPT_RENAME}" ]] && return 0
}

function power_mode {
  debug "${FUNCNAME[0]}" "$@"

  [[ -n "${OPT_POWER}" ]] && return 0
}

function handle_power_mode {
  debug "${FUNCNAME[0]}" "$@"

  local id="$(get_droplet_id ${OPT_NAME})"

  case "${OPT_POWER}" in
    "on") doctl compute droplet-action power-on "${id}" ;;
    "off") doctl compute droplet-action power-off "${id}" ;;
    *) display_usage ;;
  esac

  return 1
}

function run {
  debug "${FUNCNAME[0]}" "$@"

  if create_mode; then
    if droplet_mode; then
      create_droplet
    elif database_mode; then
      create_database
    elif firewall_mode; then
      create_firewall
    elif domain_mode; then
      create_domain
    else
      display_usage
    fi
  elif expunge_mode; then
    if droplet_mode; then
      expunge_droplet
    elif database_mode; then
      expunge_database
    elif firewall_mode; then
      expunge_firewall
    elif domain_mode; then
      expunge_domain
    else
      display_usage
    fi
  elif rename_mode; then
    if droplet_mode; then
      rename_droplet
    else
      display_usage
    fi
  elif power_mode; then
    echo "then 1"
    if droplet_mode; then
      handle_power_mode
    else
      display_usage
    fi
  else
    display_usage
  fi
}

function main {
  debug "${FUNCNAME[0]}" "$@"

  parse_arguments "$@"
  process_arguments "$@"

  run "$@"
}

main "$@"
