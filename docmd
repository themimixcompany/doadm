#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly OS=$(uname)
readonly VERSION=1.0.1

readonly OPT_BASE_NAME=${SELF}
readonly OPT_GLOBAL_CONFIG=/usr/local/etc/${OPT_BASE_NAME}rc
readonly OPT_USER_XDG_CONFIG=$HOME/.config/${OPT_BASE_NAME}/${OPT_BASE_NAME}rc
readonly OPT_USER_HOME_CONFIG=$HOME/.${OPT_BASE_NAME}rc

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

OPT_CONFIG=

OPT_NAME=
OPT_DROPLET=
OPT_DATABASE=
OPT_CREATE=
OPT_DELETE=
OPT_LIST=

OPT_DROPLET_IMAGE=ubuntu-20-04-x64 # doctl compute image list-distribution
OPT_DROPLET_REGION=nyc1            # doctl compute region list
OPT_DROPLET_SIZE=s-1vcpu-1gb       # doctl compute size list

OPT_DATABASE_ENGINE=pg
OPT_DATABASE_REGION=nyc1
OPT_DATABASE_SIZE=db-s-1vcpu-1gb
OPT_DATABASE_VERSION=11

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "error: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "warning: ${@}" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m${@}" >&2
  fi
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo '**'
    echo \${@}: ${@}
    echo \$OPT_DEBUG: "${OPT_DEBUG}"
  fi
}

function parse_arguments () {
  debug ${FUNCNAME[0]} "$@"

  local opts=$(getopt -n "${SELF}" --options hdvn:OBCDLi:r:s:E:R:S:V: --longoptions help,debug,verbose,droplet,database,create,delete,list,droplet-image:,droplet-region:,droplet-size:,database-engine:,database-region:,database-size:,database-version: -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Exiting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (-h|--help) OPT_HELP=true; shift ;;
      (-d|--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;
      (-n|--name) OPT_NAME=$2; shift 2 ;;
      (-O|--droplet) OPT_DROPLET=true; shift ;;
      (-B|--database) OPT_DATABASE=true; shift ;;
      (-C|--create) OPT_CREATE=true; shift ;;
      (-D|--delete) OPT_DELETE=true; shift ;;
      (-L|--list) OPT_LIST=true; shift ;;
      (-i|--droplet-image) OPT_DROPLET_IMAGE=$2; shift 2 ;;
      (-r|--droplet-region) OPT_DROPLET_REGION=$2; shift 2 ;;
      (-s|--droplet-size) OPT_DROPLET_SIZE=$2; shift 2 ;;
      (-E|--database-engine) OPT_DATABASE_ENGINE=$2; shift 2 ;;
      (-R|--database-region) OPT_DATABASE_REGION=$2; shift 2 ;;
      (-S|--database-size) OPT_DATABASE_SIZE=$2; shift 2 ;;
      (-V|--database-version) OPT_DATABASE_VERSION=$2; shift 2 ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

function process_arguments () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  elif [[ -n "${OPT_LIST}" ]]; then
    if [[ -n "${OPT_DROPLET}" && -z "${OPT_DATABASE}" ]]; then
      list_droplets
      exit 0
    elif [[ -n "${OPT_DATABASE}" && -z "${OPT_DROPLET}" ]]; then
      list_databases
      exit 0
    else
      display_usage
    fi
  elif [[ -z "${OPT_NAME}" ]]; then
    display_usage
  elif [[ -z "${OPT_DROPLET}" && -z "${OPT_DATABASE}" ]]; then
    display_usage
  else
    return 0
  fi
}

function display_usage () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF
${SELF} v${VERSION} [OPTIONS]...

OPTIONS:
  -h, --help             Show this help
  -d, --debug            Enable debugging mode
  -v, --verbose          Enable verbose output
  -n, --name             The name of the droplet or database to manage
  -O, --droplet          Knob to specify droplet operations
  -B, --database         Knob to specify database operations
  -C, --create           Create a droplet or database
  -D, --delete           Delete a droplet or database
  -L, --list             List all the droplets or databases
  -i, --droplet-image    Specify the droplet image (default: ${OPT_DROPLET_IMAGE})
  -r, --droplet-region   Specify the droplet region (default: ${OPT_DROPLET_REGION})
  -s, --droplet-size     Specify the droplet size (default: ${OPT_DROPLET_SIZE})
  -E, --database-engine  Specify the database engine (default: ${OPT_DATABASE_ENGINE})
  -R, --database-region  Specify the database region (default: ${OPT_DATABASE_REGION})
  -S, --database-size    Specify the database size (default: ${OPT_DATABASE_SIZE})
  -V, --database-version Specify the database version (default: ${OPT_DATABASE_VERSION})
EOF
  exit 0
}

function read_config () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_CONFIG}" ]]; then
    source "${OPT_CONFIG}"
  else
    if [[ -e "${OPT_USER_HOME_CONFIG}" ]]; then
      source "${OPT_USER_HOME_CONFIG}"
      OPT_TOKEN=${TOKEN}
      return 0
    fi

    if [[ -e "${OPT_USER_XDG_CONFIG}" ]]; then
      source "${OPT_USER_XDG_CONFIG}"
      OPT_TOKEN=${TOKEN}
      return 0
    fi

    if [[ -e "${OPT_GLOBAL_CONFIG}" ]]; then
      source "${OPT_GLOBAL_CONFIG}"
      OPT_TOKEN=${TOKEN}
      return 0
    fi
  fi
}

function list_droplets () {
  debug ${FUNCNAME[0]} "$@"

  doctl compute droplet list
}

function get_droplet_id () {
  debug ${FUNCNAME[0]} "$@"

  list_droplets | awk "/[0-9]+\s+${1}/" | awk '{print $1}'
}

function get_droplet_ids () {
  debug ${FUNCNAME[0]} "$@"

  local OIFS=${IFS}

  IFS="," read -ra DROPLET_NAMES <<< "${OPT_DROPLET_NAMES}"

  for droplet_name in ${DROPLET_NAMES[@]}; do
    echo -n "$(get_droplet_id $droplet_name),"
  done

  IFS=${OIFS}
}

function create_droplet () {
  debug ${FUNCNAME[0]} "$@"

  doctl compute droplet create \
        --image "${OPT_DROPLET_IMAGE}" \
        --region "${OPT_DROPLET_REGION}" \
        --size "${OPT_DROPLET_SIZE}" \
        "${OPT_NAME}"
}

function delete_droplet () {
  debug ${FUNCNAME[0]} "$@"

  doctl compute droplet delete "$(get_droplet_id ${OPT_NAME})"
}

function list_databases () {
  debug ${FUNCNAME[0]} "$@"

  doctl databases list
}

function get_database_id () {
  debug ${FUNCNAME[0]} "$@"

  list_databases | awk "/[0-9]+\s+${1}/" | awk '{print $1}'
}

function create_database () {
  debug ${FUNCNAME[0]} "$@"

  doctl databases create \
        --engine "${OPT_DATABASE_ENGINE}" \
        --region "${OPT_DATABASE_REGION}" \
        --size "${OPT_DATABASE_SIZE}" \
        --version "${OPT_DATABASE_VERSION}" \
        "${OPT_NAME}" | awk '{print $9}'
}

function delete_database () {
  debug ${FUNCNAME[0]} "$@"

  doctl databases delete "$(get_database_id ${OPT_NAME})"
}

function run () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_NAME}" && -n "${OPT_DROPLET}" && -z "${OPT_DATABASE}" ]]; then
    if [[ -n "${OPT_CREATE}" && -z "${OPT_DELETE}" ]]; then
      create_droplet
    elif [[ -n "${OPT_DELETE}" && -z "${OPT_CREATE}" ]]; then
      delete_droplet
    else
      display_usage
    fi
  elif [[ -n "${OPT_NAME}" && -n "${OPT_DATABASE}" && -z "${OPT_DROPLET}" ]]; then
    if [[ -n "${OPT_CREATE}" && -z "${OPT_DELETE}" ]]; then
      create_database
    elif [[ -n "${OPT_DELETE}" && -z "${OPT_CREATE}" ]]; then
      delete_database
    else
      display_usage
    fi
  else
    display_usage
  fi
}

function main () {
  debug ${FUNCNAME[0]} "$@"

  parse_arguments "$@"
  process_arguments "$@"

  run "$@"
}

main "$@"
